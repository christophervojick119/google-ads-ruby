require 'google/ads/google_ads/version_alternate'

<%
highest_version = :"V#{versions.map(&:to_s).map(&:downcase).map { |x| x.gsub("v", "") }.map { |x| Integer(x) }.max }"
%>

<% versions.each do |version| %>
require 'google/ads/google_ads/factories/<%= version.to_s.downcase %>/resources'
require 'google/ads/google_ads/factories/<%= version.to_s.downcase %>/services'
require 'google/ads/google_ads/factories/<%= version.to_s.downcase %>/enums'
require 'google/ads/google_ads/factories/<%= version.to_s.downcase %>/operations'
<% end %>
module Google
  module Ads
    module GoogleAds
      module Factories
        Factory = Struct.new(:resources, :services, :enums, :operations)

        <% versions.each do |version| %>
        FACTORY_<%= version.to_s.camelize %> = Factory.new(
          <%= version.to_s.camelize %>::Resources,
          <%= version.to_s.camelize %>::Services,
          <%= version.to_s.camelize %>::Enums,
          <%= version.to_s.camelize %>::Operations,
        ).freeze
        <% end %>

        VERSIONS = [
          <% versions.each do |version| %>
            :<%= version.to_s %>,
          <% end %>
        ]

        HIGHEST_VERSION = :<%= highest_version %>

        def self.version_alternate_for(type)
          raise ArgumentError.new(
            "Dont have version alternate for #{type}, valid values are :resources, :services, :enums, :operations,  got #{type}"
          ) unless [:resources, :services, :enums, :operations].include?(type)

          VersionAlternate.new(
            FACTORY_<%= highest_version.to_s.camelize %>.public_send(type),
            {
              <% versions.each do |version| %>
                <%= version.to_s %>: FACTORY_<%= version.to_s.camelize %>.public_send(type),
              <% end %>
            }
          )
        end

        def self.versions
        end

        def self.at_version(version)
          case version
          <% versions.each do |version| %>
          when :<%= version.to_s %>
            FACTORY_<%= version.to_s.camelize %>
          <% end %>
          else
            raise ArgumentError.new("Got unkown version: #{version}")
          end
        end
      end
    end
  end
end
